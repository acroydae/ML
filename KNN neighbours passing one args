import numpy as np

def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2)**2))

class KNN:
    def __init__(self, k=3):
        self.k = k
        
    def fit(self, X):
        self.X_train = X
        
    def predict(self, x):
        distances = [euclidean_distance(x, x_train) for x_train in self.X_train]
        k_indices = np.argsort(distances)[:self.k]
        return k_indices

# Example usage
X_train = np.array([[1], [2], [3], [4], [5]])
x_test = np.array([3.5])

knn = KNN(k=3)
knn.fit(X_train)

nearest_neighbors_indices = knn.predict(x_test)
print(nearest_neighbors_indices)
