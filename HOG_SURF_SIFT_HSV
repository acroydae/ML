Certainly, I'll provide you with code templates for each of the mentioned feature extraction methods: HOG (Histogram of Oriented Gradients), SIFT (Scale-Invariant Feature Transform), SURF (Speeded-Up Robust Features), and HSV (Hue, Saturation, Value) histogram. You can integrate these functions into your `extract_features` function as mentioned earlier. Keep in mind that you may need to install additional libraries such as OpenCV to use some of these feature extraction methods.

1. **HOG (Histogram of Oriented Gradients)**:

```python
import cv2
from skimage.feature import hog

def extract_hog_features(image):
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Calculate HOG features
    features, hog_image = hog(gray_image, pixels_per_cell=(8, 8),
                              cells_per_block=(2, 2), visualize=True)
    
    return features
```

2. **SIFT (Scale-Invariant Feature Transform)**:

```python
import cv2

def extract_sift_features(image):
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Initialize SIFT detector
    sift = cv2.SIFT_create()
    
    # Detect and compute SIFT features
    keypoints, descriptors = sift.detectAndCompute(gray_image, None)
    
    return descriptors
```

3. **SURF (Speeded-Up Robust Features)**:

```python
import cv2

def extract_surf_features(image):
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Initialize SURF detector
    surf = cv2.xfeatures2d.SURF_create()
    
    # Detect and compute SURF features
    keypoints, descriptors = surf.detectAndCompute(gray_image, None)
    
    return descriptors
```

4. **HSV (Hue, Saturation, Value) Histogram**:

```python
import cv2
import numpy as np

def extract_hsv_histogram(image):
    # Convert the image to HSV color space
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    
    # Split the channels
    h, s, v = cv2.split(hsv_image)
    
    # Compute histograms for each channel
    hist_h = cv2.calcHist([h], [0], None, [256], [0, 256])
    hist_s = cv2.calcHist([s], [0], None, [256], [0, 256])
    hist_v = cv2.calcHist([v], [0], None, [256], [0, 256])
    
    # Normalize the histograms
    hist_h /= hist_h.sum()
    hist_s /= hist_s.sum()
    hist_v /= hist_v.sum()
    
    # Concatenate the histograms into a single feature vector
    combined_histogram = np.concatenate((hist_h, hist_s, hist_v))
    
    return combined_histogram
```

You can use these functions to extract features and then concatenate them into a single feature vector in your `extract_features` function.
