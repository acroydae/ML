import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

# Load the dataset
data = pd.read_csv('amazon_cell_phones_reviews.csv')

# Select the relevant columns
data = data[['reviewText', 'overall']]

# Data Preprocessing
def preprocess_text(text):
    # Convert to lowercase
    text = text.lower()
    # Remove punctuation (replace with whitespace)
    text = ''.join(char if char.isalnum() else ' ' for char in text)
    return text

data['reviewText'] = data['reviewText'].apply(preprocess_text)

# Text Representation using TF-IDF
tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # Use the top 5000 most important words
tfidf_matrix = tfidf_vectorizer.fit_transform(data['reviewText'])

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(tfidf_matrix, data['overall'], test_size=0.2, random_state=42)

# Train the KNN model
knn_model = KNeighborsRegressor(n_neighbors=5)  # You can experiment with different values of K
knn_model.fit(X_train, y_train)

# User Input and Recommendation
def get_recommendations(query):
    # Preprocess the query
    query = preprocess_text(query)
    query_vector = tfidf_vectorizer.transform([query])
    
    # Use the trained KNN model to find the K nearest neighbors
    distances, indices = knn_model.kneighbors(query_vector, n_neighbors=5)
    
    # Get the recommendations from the nearest neighbors
    recommendations = data.iloc[indices[0]]['reviewText'].values
    
    return recommendations

# Example Usage
user_query = "Great phone with good battery life"
recommendations = get_recommendations(user_query)
print("Recommended reviews:")
for review in recommendations:
    print(review)

# Evaluation
y_pred = knn_model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)
